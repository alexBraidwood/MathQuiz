using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MathQuiz
{
    public class Quiz
    {
        private Stack<IQuizzable> problems { get; set; }
        public List<ProblemType> ProblemTypes { get; private set; }
        public int ProblemsLeft { get; private set; }
        private int numberOfNumbers;

        public Quiz(int ProblemCount, int NumberOfNumbers = 2, params ProblemType[] ProblemTypes)
        {
            this.ProblemsLeft = ProblemCount;
            this.numberOfNumbers = NumberOfNumbers;
            this.ProblemTypes = new List<ProblemType>(ProblemTypes);
            this.problems = MathGenerator.GetProblems(ProblemCount, NumberOfNumbers, ProblemTypes);
        }

        /// <summary>
        /// Get the next IQuizzable from the quiz
        /// </summary>
        /// <returns>The next Quiz question</returns>
        public IQuizzable getNextProblem()
        {
            ProblemsLeft--;
            return problems.Pop();
        }

        /// <summary>
        /// Adds new problem type to IQuizzable types that this quiz will generate
        /// </summary>
        /// <param name="type">Type of problem</param>
        /// <returns>Whether or not the type existed in the Quiz already</returns>
        public bool AddProblemType(ProblemType type)
        {
            if (!ProblemTypes.Contains<ProblemType>(type))
            {
                ProblemTypes.Add(type);
                return false;
            }

            return true;
        }

        /// <summary>
        /// Removes a problem type from IQuizzable types this quiz can generate
        /// </summary>
        /// <param name="type">Type of problem</param>
        /// <returns>Whether or not the tyoe existed in the Quiz already</returns>
        public bool RemoveProblemType(ProblemType type)
        {
            if (ProblemTypes.Contains<ProblemType>(type))
            {
                ProblemTypes.Remove(type);
                return true;
            }

            return false;
        }

        /// <summary>
        /// Increase number of problems this quiz should generate only if this won't wrap count
        /// </summary>
        /// <param name="Amount">A positive integer, less than 100</param>
        public void IncreaseNumberOfProblems(uint Amount)
        {
            if (Amount < 101 && ((ProblemsLeft + (int)Amount) < int.MaxValue))
                ProblemsLeft += (int)Amount;
        }

        /// <summary>
        /// Decrease problem count generated by the quiz
        /// </summary>
        /// <param name="Amount">Positive integer amount less than 100</param>
        public void DecreaseNumberOfProblems(uint Amount)
        {
            if (Amount < 101)
                ProblemsLeft += (int)Amount;
            if (ProblemsLeft < 0)
                ProblemsLeft = 0;
        }
    }
}
